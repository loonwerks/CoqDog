[
    {
        "lemma-name": "step_pl_eq",
        "proof-shots": [
            "intros st0 ev st1 H.\n  induction H; simpl; auto."
        ]
    },
    {
        "lemma-name": "step_seval",
        "proof-shots": [
            "intros st0 ev st1 H.\n  induction H; simpl; auto;\n  try (rewrite IHstep; reflexivity);\n  try (rewrite IHstep1; rewrite IHstep2; reflexivity).",
            "intros st0 ev st1 H.\n  induction H; simpl; auto;\n  try (rewrite IHstep; apply step_pl_eq in H; rewrite H; reflexivity);\n  try (rewrite IHstep1; rewrite IHstep2; reflexivity).",
            "intros st0 ev st1 H.\n  induction H; simpl; auto;\n  try (rewrite IHstep; reflexivity).\n  - rewrite IHstep. apply step_pl_eq in H. rewrite H. reflexivity."
        ]
    },
    {
        "lemma-name": "lstar_transitive",
        "proof-shots": [
            "intros st0 tr0 st1 tr1 st2 H0 H1.\n  induction H0.\n  - simpl. assumption.\n  - simpl. eapply lstar_tran. apply H. eapply IHlstar. assumption.\n  - eapply lstar_silent_tran. apply H. eapply IHlstar. assumption."
        ]
    },
    {
        "lemma-name": "star_transitive",
        "proof-shots": [
            "intros st0 st1 st2 H0 H1.\n  induction H0.\n  - assumption.\n  - eapply star_tran. apply H. eapply IHstar. assumption."
        ]
    },
    {
        "lemma-name": "lstar_star",
        "proof-shots": [
            "intros st0 tr st1 H.\n  induction H.\n  - apply star_refl.\n  - eapply star_tran. apply H. apply IHlstar.\n  - eapply star_tran. apply H. apply IHlstar."
        ]
    },
    {
        "lemma-name": "star_lstar",
        "proof-shots": [
            "intros st0 st1 H.\n  induction H.\n  - exists []. apply lstar_refl.\n  - destruct IHstar as [tr IH].\n    exists (match e with | Some ev => [ev] | None => [] end ++ tr).\n    destruct e.\n    + simpl. eapply lstar_tran. apply H. apply IH.\n    + simpl. eapply lstar_silent_tran. apply H. apply IH."
        ]
    },
    {
        "lemma-name": "star_seval",
        "proof-shots": [
            "intros st0 st1 H.\n  induction H.\n  - reflexivity.\n  - eapply step_seval in H. rewrite IHstar in H. assumption."
        ]
    },
    {
        "lemma-name": "steps_preserves_eval",
        "proof-shots": [
            "intros t p p' e0 e1 H.\n  remember (conf t p e0) as st0.\n  remember (stop p' e1) as st1.\n  induction H; inversion Heqst0; subst.\n  - inversion H; subst; reflexivity.\n  - eapply star_seval in H1. simpl in H1. rewrite <- H1 in H0.\n    apply IHstar in Heqst1. auto. rewrite Heqst1. reflexivity.",
            "intros t p p' e0 e1 H.\n  remember (conf t p e0) as st0.\n  remember (stop p' e1) as st1.\n  induction H; inversion Heqst0; subst; clear Heqst0.\n  - inversion H; subst. reflexivity.\n  - apply IHstar in Heqst1.\n    eapply star_seval in H. simpl in H. rewrite H. assumption."
        ]
    }
]