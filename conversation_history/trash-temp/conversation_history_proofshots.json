[
    {
        "lemma-name": "halt_size",
        "proof-shots": [
            "split.\n- intros. unfold halt in H. destruct H as [ev [st1 [H1 H2]]]. apply step_pl_eq in H1. rewrite H2 in H1. simpl in H1. assumption.\n- intros. unfold halt. exists 0. exists st. split.\n  + apply star_nstar. assumption.\n  + rewrite H. apply esize_nonempty.",
            "intros. destruct st. simpl. try split.\n- intros. try tauto.\n- intros. try tauto.",
            "intros. split.\n- intros. destruct st. unfold halt in H. destruct H as [H1 H2]. discriminate H2.\n- intros. destruct st. simpl in H. discriminate H.",
            "split; intros.\n  - destruct st; simpl in H; try tauto.\n  - destruct st; simpl in H; try tauto.\n    + simpl; auto.\n    + destruct a; simpl in H; discriminate."
        ]
    },
    {
        "lemma-name": "step_size",
        "proof-shots": [
            "intros. destruct st0, st1; simpl; try tauto.\n- destruct a; simpl in H; discriminate.\n- destruct a; simpl in H; discriminate.",
            "intros.\n  induction H; simpl; auto.",
            "intros. destruct st0, st1; simpl; try lia.\n- destruct a; simpl in H; discriminate.\n- destruct a; simpl in H; discriminate.",
            "intros.\n  induction H; simpl; auto; lia."
        ]
    },
    {
        "lemma-name": "step_count",
        "proof-shots": [
            "intros. induction H.\n  - simpl. lia.\n  - apply step_size in H. rewrite <- H in IHnstar. simpl in IHnstar. lia.",
            "intros. induction H.\n  - simpl. lia.\n  - destruct y; simpl in *.\n    + apply step_size in H. rewrite <- H in IHnstar. lia.\n    + apply step_size in H. rewrite <- H in IHnstar. lia.",
            "intros. revert t p e. induction n; intros; simpl in *.\n  - inversion H; subst; simpl; lia.\n  - inv H. apply step_size in H2. apply IHn in H3. lia.",
            "induction n; intros.\n  - inv H; simpl; auto.\n  - inv H.\n    apply IHn in H1.\n    rewrite H1.\n    apply step_size in H2.\n    lia."
        ]
    }
]